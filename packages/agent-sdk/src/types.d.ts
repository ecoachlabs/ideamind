import { z } from 'zod';
import { ArtifactReference } from '@ideamine/artifact-schemas';
/**
 * Agent input context
 */
export interface AgentInput {
    workflowRunId: string;
    phase: string;
    artifacts: ArtifactReference[];
    budget: {
        maxCostUsd: number;
        currentCostUsd: number;
        maxTokens: number;
        currentTokens: number;
    };
    metadata?: Record<string, unknown>;
}
/**
 * Agent output result
 */
export interface AgentOutput {
    success: boolean;
    artifacts: ArtifactReference[];
    costUsd: number;
    tokensUsed: number;
    durationMs: number;
    toolsInvoked?: string[];
    error?: string;
    metadata?: Record<string, unknown>;
}
/**
 * Execution plan generated by Planner
 */
export interface ExecutionPlan {
    steps: Array<{
        id: string;
        description: string;
        estimatedCostUsd?: number;
    }>;
    approach: string;
    alternatives?: string[];
}
/**
 * Reasoning result before tool invocation
 */
export interface ReasoningResult {
    content: string;
    confidence: number;
    needsImprovement: boolean;
    reasoning: string;
}
/**
 * Analyzer decision on tool usage
 */
export interface AnalyzerDecision {
    useTool: boolean;
    toolId?: string;
    toolVersion?: string;
    voiScore?: number;
    reasoning: string;
    estimatedImprovement?: number;
    estimatedCostUsd?: number;
    input?: Record<string, unknown>;
}
/**
 * Verifier result comparing outputs
 */
export interface VerifierResult {
    improved: boolean;
    score: number;
    delta: number;
    dimensions: Array<{
        dimension: string;
        baselineScore: number;
        newScore: number;
        weight: number;
    }>;
    reasoning: string;
}
/**
 * Tool invocation context
 */
export interface ToolInvocationContext {
    workflowRunId: string;
    agentId: string;
    toolId: string;
    toolVersion: string;
    input: Record<string, unknown>;
    timeout?: number;
    budget?: {
        maxCostUsd: number;
    };
}
/**
 * Tool invocation result
 */
export interface ToolInvocationResult {
    success: boolean;
    output: Record<string, unknown>;
    costUsd: number;
    durationMs: number;
    exitCode?: number;
    error?: string;
    logs?: string;
}
/**
 * Tool policy configuration
 */
export declare const ToolPolicySchema: any;
export type ToolPolicy = z.infer<typeof ToolPolicySchema>;
/**
 * Agent configuration
 */
export interface AgentConfig {
    agentId: string;
    agentType: string;
    phase: string;
    toolPolicy: ToolPolicy;
    llmConfig: {
        model: string;
        temperature: number;
        maxTokens: number;
    };
    retryPolicy?: {
        maxRetries: number;
        backoffMs: number;
    };
}
//# sourceMappingURL=types.d.ts.map