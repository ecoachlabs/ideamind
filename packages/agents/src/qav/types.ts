/**
 * Q/A/V Triad Type Definitions
 *
 * Shared types for Question Agent (QAQ), Answer Agent (QAA), and Question Validator (QV)
 */

/**
 * Question priority levels
 */
export type QuestionPriority = 'high' | 'medium' | 'low';

/**
 * Question categories
 */
export type QuestionCategory =
  | 'clarification'      // Clarify ambiguous requirements
  | 'validation'         // Validate assumptions or decisions
  | 'assumption'         // Identify implicit assumptions
  | 'risk'              // Identify risks or edge cases
  | 'consistency'       // Check for contradictions
  | 'completeness';     // Identify missing information

/**
 * Question decision impact
 */
export type DecisionImpact = 'high' | 'medium' | 'low';

/**
 * Question generated by QAQ
 */
export interface Question {
  id: string;
  text: string;
  category: QuestionCategory;
  priority: QuestionPriority;
  decision_impact: DecisionImpact;
  context: {
    phase: string;
    artifact_ids?: string[];  // Artifacts that triggered this question
    gap_type?: string;        // Type of gap identified (e.g., "missing_data", "ambiguity")
  };
  tags?: string[];
  depends_on?: string[];      // Other question IDs this depends on
}

/**
 * Citation for evidence in answers
 */
export interface Citation {
  type: 'artifact' | 'tool_result' | 'km_node' | 'assumption';
  id: string;
  excerpt?: string;           // Relevant text excerpt
  confidence: number;         // 0-1 confidence in this citation
  metadata?: Record<string, any>;
}

/**
 * Answer generated by QAA
 */
export interface Answer {
  answer_id: string;
  question_id: string;
  answer: string | 'UNKNOWN';  // UNKNOWN if confidence < 0.6
  citations: Citation[];
  confidence: number;          // 0-1 overall confidence
  reasoning?: string;          // Why this answer (for UNKNOWN cases)
  next_steps?: string[];       // For UNKNOWN: what's needed to answer
  generated_by: string;        // Agent identifier
  timestamp: string;
}

/**
 * Validation result from QV
 */
export interface ValidationResult {
  question_id: string;
  answer_id: string;
  accepted: boolean;
  scores: {
    grounding: number;         // 0-1, measures citation quality
    completeness: number;      // 0-1, measures if question fully answered
    specificity: number;       // 0-1, measures answer specificity
    consistency: number;       // 0-1, measures consistency with existing knowledge
  };
  overall_score: number;       // Average of scores
  issues: string[];            // List of validation issues
  hints?: string[];            // Hints for improvement (if rejected)
  validated_by: string;        // Validator identifier
  timestamp: string;
}

/**
 * QAV Bundle for Knowledge Refinery processing
 */
export interface QAVBundle {
  questions: Question[];
  answers: Answer[];
  validations: ValidationResult[];
  phase: string;
  run_id: string;
}

/**
 * Gap analysis result
 */
export interface Gap {
  type: 'missing_data' | 'ambiguity' | 'contradiction' | 'assumption' | 'risk';
  severity: 'high' | 'medium' | 'low';
  description: string;
  artifact_ids: string[];
  suggested_question: string;
  priority: number;  // 0-1 for ranking
}

/**
 * Input for Question Agent (QAQ)
 */
export interface QuestionGenerationInput {
  phase: string;
  artifacts: any[];
  context: Record<string, any>;
  rubrics: Record<string, any>;
  prior_questions?: Question[];  // Questions from previous iterations/phases
}

/**
 * Input for Answer Agent (QAA)
 */
export interface AnswerGenerationInput {
  questions: Question[];
  artifacts: any[];
  allowlisted_tools: string[];
  phase: string;
  context?: Record<string, any>;
}

/**
 * Input for Question Validator (QV)
 */
export interface ValidationInput {
  questions: Question[];
  answers: Answer[];
  existing_km_nodes?: any[];  // For consistency checking
  phase?: string;
}

/**
 * Refinery processing result
 */
export interface RefineryProcessingResult {
  kmap_refs: string[];         // Knowledge Map frame IDs created
  assumptions: any[];          // Assumptions registered in DB
  metrics: {
    questions_processed: number;
    answers_accepted: number;
    answers_unknown: number;
    frames_created: number;
    assumptions_created: number;
  };
}
